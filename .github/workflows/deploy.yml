name: CI/CD Crypto Tracker

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  lint-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Frontend lint & test
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - run: |
          cd frontend
          npm ci
          npm run lint

      # Backend lint & test (exemple Node.js)
      - run: |
          cd backend
          npm ci
          npm run lint
          npm test

  build-frontend:
    runs-on: ubuntu-latest
    needs: lint-test
    steps:
      - uses: actions/checkout@v4
      - name: Build frontend
        run: |
          cd frontend
          npm ci
          npm run build
      - name: Docker build frontend
        run: |
          docker build -t ${{ secrets.REGISTRY }}/crypto-frontend:${{ github.sha }} -f frontend/Dockerfile .
          echo ${{ secrets.REGISTRY_PASSWORD }} | docker login -u ${{ secrets.REGISTRY_USER }} --password-stdin
          docker push ${{ secrets.REGISTRY }}/crypto-frontend:${{ github.sha }}

  build-backend:
    runs-on: ubuntu-latest
    needs: lint-test
    steps:
      - uses: actions/checkout@v4

      # Step 1 : créer le .env depuis les secrets
      - name: Create .env for backend from secrets
        run: |
          cat <<EOF > backend/.env
          NODE_ENV=development
          PORT=3000

          # Cosmos DB (SQL Core)
          COSMOS_ENDPOINT=${{ secrets.COSMOS_ENDPOINT }}
          COSMOS_KEY=${{ secrets.COSMOS_KEY }}
          COSMOS_DB=${{ secrets.COSMOS_DB }}
          COSMOS_CONTAINER=${{ secrets.COSMOS_CONTAINER }}
          COSMOS_PARTITION_KEY=${{ secrets.COSMOS_PARTITION_KEY }}

          # Alerting
          ALERT_THRESHOLD_24H=${{ secrets.ALERT_THRESHOLD_24H }}
          ALERT_CHANNEL=${{ secrets.ALERT_CHANNEL }}
          ALERT_EMAIL_TO=${{ secrets.ALERT_EMAIL_TO }}

          # External API
          COINGECKO_API_TIER=${{ secrets.COINGECKO_API_TIER }}
          COINGECKO_API_KEY=${{ secrets.COINGECKO_API_KEY }}
          COINGECKO_BASE_URL=${{ secrets.COINGECKO_BASE_URL }}
          EOF

      # Step 2 : installer les dépendances backend
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      # Step 3 : build Docker backend
      - name: Docker build backend
        run: |
          docker build -t ${{ secrets.REGISTRY }}/crypto-backend:${{ github.sha }} -f backend/Dockerfile .

      # Step 4 : login Docker registry
      - name: Docker login
        run: |
          echo ${{ secrets.REGISTRY_PASSWORD }} | docker login ${{ secrets.REGISTRY }} -u ${{ secrets.REGISTRY_USER }} --password-stdin

      # Step 5 : push Docker image
      - name: Push Docker backend image
        run: |
          docker push ${{ secrets.REGISTRY }}/crypto-backend:${{ github.sha }}


  terraform:
    runs-on: ubuntu-latest
    needs: [ build-frontend, build-backend ]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - run: terraform init
      - run: terraform validate
      - run: terraform plan -out=tfplan
      - run: terraform apply -auto-approve tfplan

  deploy:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - uses: actions/checkout@v4
      - name: Deploy manifests
        run: |
          kubectl apply -f k8s/
          kubectl rollout status deployment/crypto-frontend
          kubectl rollout status deployment/crypto-backend
