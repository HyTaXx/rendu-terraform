name: CI/CD Crypto Tracker

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  lint-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Frontend lint & test
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - run: |
          cd frontend
          npm ci
          # npm run lint

      # Backend lint & test
      - run: |
          cd backend
          npm ci
          # npm run lint
          # npm test

  build-frontend:
    runs-on: ubuntu-latest
    needs: lint-test
    steps:
      - uses: actions/checkout@v4
      - name: Build frontend
        run: |
          cd frontend
          npm ci
          npm run build

  prepare-backend:
    runs-on: ubuntu-latest
    needs: lint-test
    steps:
      - uses: actions/checkout@v4
      - name: Create .env for backend from secrets
        run: |
          cat <<EOF > backend/.env
          NODE_ENV=development
          PORT=3000

          # Cosmos DB
          COSMOS_ENDPOINT=${{ secrets.COSMOS_ENDPOINT }}
          COSMOS_KEY=${{ secrets.COSMOS_KEY }}
          COSMOS_DB=${{ secrets.COSMOS_DB }}
          COSMOS_CONTAINER=${{ secrets.COSMOS_CONTAINER }}
          COSMOS_PARTITION_KEY=${{ secrets.COSMOS_PARTITION_KEY }}

          # Alerting
          ALERT_THRESHOLD_24H=${{ secrets.ALERT_THRESHOLD_24H }}
          ALERT_CHANNEL=${{ secrets.ALERT_CHANNEL }}
          ALERT_EMAIL_TO=${{ secrets.ALERT_EMAIL_TO }}

          # External API
          COINGECKO_API_TIER=${{ secrets.COINGECKO_API_TIER }}
          COINGECKO_API_KEY=${{ secrets.COINGECKO_API_KEY }}
          COINGECKO_BASE_URL=${{ secrets.COINGECKO_BASE_URL }}
          EOF

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

  terraform:
    runs-on: ubuntu-latest
    needs: [ build-frontend, prepare-backend ]
    steps:
      - uses: actions/checkout@v4

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # Initialiser et appliquer la configuration Terraform
      - name: Terraform Init & Apply
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          TF_VAR_client_id: ${{ secrets.ARM_CLIENT_ID }}
          TF_VAR_client_secret: ${{ secrets.ARM_CLIENT_SECRET }}
          TF_VAR_tenant_id: ${{ secrets.ARM_TENANT_ID }}
        run: |
          cd terraform
          terraform init
          terraform validate
          
          # Option: Détruire les ressources existantes d'abord (décommentez si nécessaire)
          # az group delete --name crypto-rg-clement-2024 --yes --no-wait || true
          
          # Importer les ressources existantes si elles existent  
          terraform import azurerm_resource_group.crypto_rg /subscriptions/${{ secrets.ARM_SUBSCRIPTION_ID }}/resourceGroups/crypto-rg-clement-2024 || true
          
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan
